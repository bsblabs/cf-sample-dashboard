<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:sec="http://www.springframework.org/schema/security"
       xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="
        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
        http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <import resource="classpath:/META-INF/dashboard/web-security-optional.xml"/>

    <http xmlns="http://www.springframework.org/schema/security"
          use-expressions="true"
          entry-point-ref="entryPoint"
          disable-url-rewriting="true"
          authentication-manager-ref="authenticationManager"
          access-decision-manager-ref="accessDecisionManager">

        <!--OAuth expressions such "#oauth2.isOAuth()" are supported.-->
        <intercept-url pattern="/" access="hasRole('ROLE_USER')"/>
        <intercept-url pattern="/services/**" access="hasAuthority('ROLE_TECH')"/>
        <intercept-url pattern="/ui/**" access="hasRole('ROLE_USER')"/>
        <intercept-url pattern="/**" access="isFullyAuthenticated()"/>

        <anonymous enabled="false"/>

        <custom-filter ref="logoutFilter" position="LOGOUT_FILTER"/>
        <custom-filter ref="oauth2ClientFilter" before="PRE_AUTH_FILTER"/>
        <custom-filter ref="socialClientFilter" position="PRE_AUTH_FILTER"/>
        <custom-filter ref="webServiceAuthenticationFilter" before="BASIC_AUTH_FILTER"/>
        <sec:expression-handler ref="oauthWebExpressionHandler"/>
    </http>

    <sec:authentication-manager alias="authenticationManager">
        <sec:authentication-provider ref="webServiceAuthenticationProvider"/>
        <sec:authentication-provider ref="oAuthAuthenticationProvider"/>
    </sec:authentication-manager>

    <bean id="accessDecisionManager"
          class="org.springframework.security.access.vote.UnanimousBased">
        <constructor-arg ref="accessDecisionVoters"/>
    </bean>

    <util:list id="accessDecisionVoters">
        <bean class="com.bsb.showcase.cf.dashboard.security.CloudInstanceAccessDecisionVoter"/>
        <bean class="org.springframework.security.access.vote.AuthenticatedVoter"/>
        <bean class="org.springframework.security.web.access.expression.WebExpressionVoter">
            <property name="expressionHandler" ref="oauthWebExpressionHandler"/>
        </bean>
    </util:list>

    <oauth:resource id="uaa" type="authorization_code"
                    client-id="${oauth.client.id}"
                    client-secret="${oauth.client.secret}"
                    access-token-uri="${oauth.token.access.uri}"
                    user-authorization-uri="${oauth.authorization.uri}"
                    use-current-uri="true"
                    scope="openid,cloud_controller.read,cloud_controller_service_permissions.read"/>

    <oauth:rest-template id="restTemplate" resource="uaa"/>

    <oauth:web-expression-handler id="oauthWebExpressionHandler"/>

    <oauth:client id="oauth2ClientFilter"/>

    <bean id="oAuthAuthenticationProvider"
          class="com.bsb.showcase.cf.dashboard.security.DashboardOauthAuthenticationProvider"/>

    <bean id="entryPoint"
          class="org.springframework.security.web.authentication.DelegatingAuthenticationEntryPoint">
        <constructor-arg>
            <map>
                <entry key-ref="webServiceEntryPointMatcher" value-ref="webServiceEntryPoint"/>
            </map>
        </constructor-arg>

        <property name="defaultEntryPoint" ref="webAppEntryPoint"/>
    </bean>

    <bean id="webAppEntryPoint"
          class="org.springframework.security.web.authentication.Http403ForbiddenEntryPoint"/>

    <bean id="socialClientFilter"
          class="com.bsb.showcase.cf.dashboard.security.DashboardOAuth2ClientAuthenticationProcessingFilter">

        <property name="restTemplate" ref="restTemplate"/>
        <property name="tokenServices">
            <bean id="remoteTokenServices"
                  class="org.springframework.security.oauth2.provider.token.RemoteTokenServices">
                <property name="checkTokenEndpointUrl" value="${oauth.token.check.uri}"/>
                <property name="clientId" value="${oauth.client.id}"/>
                <property name="clientSecret" value="${oauth.client.secret}"/>
                <property name="accessTokenConverter" ref="accessTokenConverter"/>
            </bean>
        </property>
        <property name="authenticationManager" ref="authenticationManager"/>
        <property name="detailsSource">
            <bean class="com.bsb.showcase.cf.dashboard.security.DashboardOAuthAuthenticationDetailsSource">
                <constructor-arg ref="restTemplate"/>
                <constructor-arg value="${dashboard.suid.file}"/>
                <constructor-arg value="${oauth.info.uri}"/>
                <constructor-arg value="${api.url}"/>
            </bean>
        </property>
        <property name="requiresAuthenticationRequestMatcher">
            <bean class="org.springframework.security.web.util.matcher.NegatedRequestMatcher">
                <constructor-arg ref="webServiceEntryPointMatcher"/>
            </bean>
        </property>
    </bean>

    <bean id="accessTokenConverter"
          class="org.springframework.security.oauth2.provider.token.DefaultAccessTokenConverter">
        <property name="userTokenConverter">
            <bean class="org.springframework.security.oauth2.provider.token.DefaultUserAuthenticationConverter">
                <property name="defaultAuthorities">
                    <util:list>
                        <value>ROLE_USER</value>
                    </util:list>
                </property>
            </bean>
        </property>
    </bean>

    <bean id="logoutSuccessHandler"
          class="org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler">
        <property name="redirectStrategy">
            <bean class="com.bsb.showcase.cf.dashboard.security.UaaLogoutRedirectStrategy">
                <constructor-arg value="${oauth.logout.url}"/>
            </bean>
        </property>
    </bean>

</beans>
